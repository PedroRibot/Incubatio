#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(ViewParams)

SamplerState InputSampler;
Texture2D SceneColor;
Texture2D InputTexture;
Texture2D DataTexture;
Texture2D<uint2> InputStencilTexture;
//float4 Color;

SamplerState mySampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

float2 PosToUV(float2 Pos)
{
    float2 ViewportUV = ((Pos - ViewParams_ViewportMin.xy) * ViewParams_ViewportSizeInverse.xy);
    return ViewportUV * ViewParams_UVViewportSize + ViewParams_UVViewportMin;
}

void UVMaskMainPS(float4 SvPosition : SV_POSITION, out float4 UVMask : SV_Target0, out float4 CopyColor : SV_Target1)
{
//    uint2 stencil = InputStencilTexture.Load(uint3(SvPosition.xy, 0));
//    float2 UV = PosToUV(SvPosition.xy);
    
//    if (stencil.y == 1)
//    {
//        UVMask = float4(UV.x, UV.y, 0, 1);
//    }
//    else
//    {
//        UVMask = float4(0, 0, 0, 0);
//    }

//    CopyColor = SceneColor.SampleLevel(InputSampler, UV, 0);
}


float4 CombineMainPS(float4 SvPosition : SV_POSITION) : SV_Target0
{
    float2 UV = PosToUV(SvPosition.xy);
    UV.y = 1 - UV.y;
    UV = UV * 2 - 1;
    UV.x *= ViewParams_ViewportMin.x / ViewParams_ViewportMin.x;

    //ResolvedView.WorldCameraOrigin;
    return float4(DataTexture.Load(int3(0, 0, 0)).r, 0, 0, 1);
    
    //return float4(ResolvedView.WorldCameraOrigin.x, ResolvedView.WorldCameraOrigin.y, 0, 1);
    //return DataTexture.Sample(InputSampler, float2(0.0,0.0));
    //return float4(1, 0, 0, 1);
    //return float4(UV.x, UV.y, 0, 1);
    
}




//void UVMaskMainPS(float4 SvPosition : SV_POSITION, out float4 UVMask : SV_Target0, out float4 CopyColor : SV_Target1)
//{
//    uint2 stencil = InputStencilTexture.Load(uint3(SvPosition.xy, 0));
//    float2 UV = PosToUV(SvPosition.xy);
//    if (stencil.y == 1)
//    {
//        UVMask = float4(UV.x, UV.y, 0, 1);
//    }
//    else
//    {
//        UVMask = float4(0, 0, 0, 0);
//    }

//    CopyColor = SceneColor.SampleLevel(InputSampler, UV, 0);
//}

//float4 CombineMainPS(float4 SvPosition : SV_POSITION) : SV_Target0
//{
//    float2 UV = PosToUV(SvPosition.xy);
//    float4 samp = Texture2DSample(InputTexture, InputSampler, UV);

//    if (length(samp.xyz) > 0)
//    {
//        return Texture2DSample(SceneColor, InputSampler, UV);;
//    }
//    return Texture2DSample(SceneColor, InputSampler, UV);
//}


//#include "/Engine/Public/Platform.ush"
//#include "/Engine/Private/Common.ush"
//#include "/Engine/Private/ScreenPass.ush"

//SCREEN_PASS_TEXTURE_VIEWPORT(ViewParams)

//SamplerState InputSampler;
//Texture2D SceneColor;
//Texture2D InputTexture;
//Texture2D<uint2> InputStencilTexture;
//float4 Color;

//float2 PosToUV(float2 Pos)
//{
//    float2 ViewportUV = ((Pos - ViewParams_ViewportMin.xy) * ViewParams_ViewportSizeInverse.xy);
//    return ViewportUV * ViewParams_UVViewportSize + ViewParams_UVViewportMin;
//}

//void UVMaskMainPS(
//	float4 SvPosition : SV_POSITION,
//	out float4 UVMask : SV_Target0,
//	out float4 CopyColor : SV_Target1
//)
//{
//    uint2 stencil = InputStencilTexture.Load(uint3(SvPosition.xy, 0));
//    float2 UV = PosToUV(SvPosition.xy);
//    if (stencil.y == 1)
//    {
//        UVMask = float4(UV.x, UV.y, 0, 1);
//    }
//    else
//    {
//        UVMask = float4(0, 0, 0, 0);
//    }

//    CopyColor = SceneColor.SampleLevel(InputSampler, UV, 0);
//}

//float4 CombineMainPS(float4 SvPosition : SV_POSITION) : SV_Target0
//{
//    float2 UV = PosToUV(SvPosition.xy);
//    float4 samp = Texture2DSample(InputTexture, InputSampler, UV);

//    if (length(samp.xyz) > 0)
//    {
//        return Color;
//    }
//    return Texture2DSample(SceneColor, InputSampler, UV);
////}

//#include "/Engine/Public/Platform.ush"
//#include "/Engine/Private/Common.ush"
//#include "/Engine/Private/ScreenPass.ush"

//#include "/Engine/Private/SceneTexturesCommon.ush"
//#include "/Engine/Private/EyeAdaptationCommon.ush"
//#include "/Engine/Private/Random.ush"
//#include "/Engine/Private/SobolRandom.ush"
//#include "/Engine/Private/MonteCarlo.ush"
//#include "/Engine/Generated/UniformBuffers/Material.ush"
////#include "/Engine/Private/DepthOfFieldCommon.ush"
////#include "/Engine/Private/CircleDOFCommon.ush"
////#include "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
////#include "/Engine/Private/PhysicsFieldSampler.ush"
//#include "/Engine/Private/SceneData.ush"
////#include "/Engine/Private/HairShadingCommon.ush"
////#include "/Engine/Private/HairStrands/HairCardsAttributeCommon.ush"
////#include "/Engine/Private/HairStrands/HairStrandsAttributeCommon.ush"
//#include "/Engine/Private/DeferredShadingCommon.ush"
//#include "/Engine/Private/SparseVolumeTexture/SparseVolumeTextureCommon.ush"


//SCREEN_PASS_TEXTURE_VIEWPORT(ViewParams)

//SamplerState InputSampler;
//Texture2D SceneColor;
//Texture2D InputTexture;
//Texture2D<uint2> InputStencilTexture;
//float4 Color;
////float3 CameraPos;

//float2 PosToUV(float2 Pos)
//{
//    float2 ViewportUV = ((Pos - ViewParams_ViewportMin.xy) * ViewParams_ViewportSizeInverse.xy);
//    return ViewportUV * ViewParams_UVViewportSize + ViewParams_UVViewportMin;
//}

//void UVMaskMainPS(float4 SvPosition : SV_POSITION, out float4 UVMask : SV_Target0, out float4 CopyColor : SV_Target1)
//{
//    uint2 stencil = InputStencilTexture.Load(uint3(SvPosition.xy, 0));
//    float2 UV = PosToUV(SvPosition.xy);
    
//    if (stencil.y == 1)
//    {
//        UVMask = float4(UV.x, UV.y, 0, 1);
//    }
//    else
//    {
//        UVMask = float4(0, 0, 0, 0);
//    }

//    CopyColor = SceneColor.SampleLevel(InputSampler, UV, 0);
//}


//float4 CombineMainPS(float4 SvPosition : SV_POSITION) : SV_Target0
//{
//    float2 UV = PosToUV(SvPosition.xy);
//    UV.y = 1 - UV.y;
//    UV = UV * 2 - 1;
//    UV.x *= ViewParams_ViewportMin.x / ViewParams_ViewportMin.x;

//    //ResolvedView.WorldCameraOrigin;
    
    
//    //return float4(ResolvedView.WorldCameraOrigin.x, ResolvedView.WorldCameraOrigin.y, 0, 1);
//    return float4(UV.x, UV.y, 0, 1);
    
//}

